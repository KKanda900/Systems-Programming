./tokenizer "array[xyz ] += pi 3.14159e-10"
word: "array"
left bracket: "["
word: "xyz"
right bracket: "]"
plus equals: "+="
word: "pi"
float: "3.14159e-10"

./tokenizer "today is a beautiful day"
word: "today"
word: "is"
word: "a"
word: "beautiful"
word: "day"

./tokenizer "0x4356abdc 0777 [] "
hexadecimal integer: "0x4356abdc"
octal integer: "0777"
left bracket: "["
right bracket: "]"

./tokenizer "numbers 972 0x972 A8 0XA8 XA8 0972 072"
word: "numbers"
decimal integer: "972"
hexadecimal integer: "0x972"
word: "A8"
hexadecimal integer: "0XA8"
word: "XA8"
decimal integer: "0972"
octal integer: "072"

./tokenizer "3.1 03.1 x3.1 0x3.1 30x1.x"
float: "3.1"
float: "03.1"
word: "x3"
structure member: "."
decimal integer: "1"
hexadecimal integer: "0x3"
structure member: "."
decimal integer: "1"
decimal integer: "30"
word: "x1"
structure member: "."
word: "x"

./tokenizer "+,++,+++,++++,+++++,++=,+++=="
addition: "+"
comma: ","
increment: "++"
comma: ","
increment: "++"
addition: "+"
comma: ","
increment: "++"
increment: "++"
comma: ","
increment: "++"
increment: "++"
addition: "+"
comma: ","
increment: "++"
assignment: "="
comma: ","
increment: "++"
plus equals: "+="
assignment: "="

./tokenizer "letskeeptestingforever : 423424 033326 0xae324 0XaEE324 0.12333 .1432423"
word: "letskeeptestingforever"
conditional false: ":"
decimal integer: "423424"
octal integer: "033326"
hexadecimal integer: "0xae324"
hexadecimal integer: "0XaEE324"
float: "0.12333"
structure member: "."
decimal integer: "1432423"

./tokenizer "woahmoretesting:01eeee73then/0xaeewef32"
word: "woahmoretesting"
conditional false: ":"
octal integer: "01"
word: "eeee73then"
division: "/"
hexadecimal integer: "0xaee"
word: "wef32"

./tokenizer "0xrhfwhe"
decimal integer: "0"
word: "xrhfwhe"

./tokenizer "0x"
decimal integer: "0"
word: "x"

./tokenizer "3e+3"
float: "3e+3"

./tokenizer "3e+"
decimal integer: "3"
word: "e"
addition: "+"

./tokenizer "2e+["
decimal integer: "2"
word: "e"
addition: "+"
left bracket: "["

./tokenizer "0794432e-[][] 0x 0x 0x3444444ef h3llo 3e-43 3e4 0 03443 0acxcc 0x344ghdkword 0word if else while for" 
decimal integer: "0794432"
word: "e"
minus/subtract operator: "-"
left bracket: "["
right bracket: "]"
left bracket: "["
right bracket: "]"
decimal integer: "0"
word: "x"
decimal integer: "0"
word: "x"
hexadecimal integer: "0x3444444ef"
word: "h3llo"
float: "3e-43"
decimal integer: "3"
word: "e4"
decimal integer: "0"
octal integer: "03443"
decimal integer: "0"
word: "acxcc"
hexadecimal integer: "0x344"
word: "ghdkword"
decimal integer: "0"
word: "word"
if: "if"
else: "else"
while: "while"
for: "for"

./tokenizer "0 023 0eth 0e10 0e-1004465533abc 0x34 0x 034x344440 0123456789"
decimal integer: "0"
octal integer: "023"
decimal integer: "0"
word: "eth"
decimal integer: "0"
word: "e10"
float: "0e-1004465533"
word: "abc"
hexadecimal integer: "0x34"
decimal integer: "0"
word: "x"
octal integer: "034"
word: "x344440"
decimal integer: "0123456789"

./tokenizer "()() (()) ))) (((())))) ()()() [] [[[]]]]]] [[[]]]]]]]]]]]]]]]]]]]]]]]]][]]][[[]"
left parenthesis: "(" 
right parenthesis: ")"
left parenthesis: "(" 
right parenthesis: ")"
left parenthesis: "(" 
left parenthesis: "(" 
right parenthesis: ")"
right parenthesis: ")"
right parenthesis: ")"
right parenthesis: ")"
right parenthesis: ")"
left parenthesis: "(" 
left parenthesis: "(" 
left parenthesis: "(" 
left parenthesis: "(" 
right parenthesis: ")"
right parenthesis: ")"
right parenthesis: ")"
right parenthesis: ")"
right parenthesis: ")"
left parenthesis: "(" 
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
left bracket: "["
right bracket: "]"
left bracket: "["
left bracket: "["
left bracket: "["
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
left bracket: "["
left bracket: "["
left bracket: "["
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
right bracket: "]"
left bracket: "["
right bracket: "]"
right bracket: "]"
right bracket: "]"
left bracket: "["
left bracket: "["
left bracket: "["
right bracket: "]"

./tokenizer ". . .. .-> -> > sizeof,.-> ->>>>><<>> sizeof.->,"
structure member: "."
structure member: "."
structure member: "."
structure member: "."
structure member: "."
structure pointer: "->"
structure pointer: "->"
greater than test: ">"
sizeof: "sizeof"
comma: ","
structure member: "."
structure pointer: "->"
structure pointer: "->"
shift right: ">>"
shift right: ">>"
shift left: "<<"
shift right: ">>"
sizeof: "sizeof"
structure member: "."
structure pointer: "->"

./tokenizer "! ~ ~~ <<>><<~~>>~<><~>! ^^>><<>>"
negate: "!"
1s complement: "~"
1s complement: "~"
1s complement: "~"
shift left: "<<"
shift right: ">>"
shift left: "<<"
1s complement: "~"
1s complement: "~"
shift right: ">>"
1s complement: "~"
less than test: "<"
greater than test: ">"
less than test: "<"
1s complement: "~"
greater than test: ">"
negate: "!"
bitwise XOR: "^"
bitwise XOR: "^"
shift right: ">>"
shift left: "<<"

./tokenizer "// / /* */ /"
division: "/"
division: "/"

./tokenizer "|| \& && &&|||&| ?:|::||"
logical OR: "||"
AND/address operator: "&"
logical AND: "&&"
logical AND: "&&"
logical OR: "||"
bitwise OR: "|"
AND/address operator: "&"
bitwise OR: "|"
conditional true: "?"
conditional false: ":"
bitwise OR: "|"
conditional false: ":"
conditional false: ":"
logical OR: "||"

 ./tokenizer "++== != !===!== <<==>>==<"
 increment: "++"
equality test: "=="
inequality test: "!="
inequality test: "!="
equality test: "=="
inequality test: "!="
assignment: "="
shift left equals: "<<="
assignment: "="
shift right equals: ">>="
assignment: "="
less than test: "<"

./tokenizer "= == += <<= >>= <> !=>> * &(& - ^= "
assignment: "="
equality test: "=="
plus equals: "+="
shift left equals: "<<="
shift right equals: ">>="
less than test: "<"
greater than test: ">"
inequality test: "!="
shift right: ">>"
multiply/dereference operator: "*"
AND/address operator: "&"
left parenthesis: "("
AND/address operator: "&"
minus/subtract operator: "-"
bitwise XOR equals: "^="

./tokenizer "& - * 
*= &-*"
AND/address operator: "&"
minus/subtract operator: "-"
multiply/dereference operator: "*"
times equals: "*="
AND/address operator: "&"
minus/subtract operator: "-"
multiply/dereference operator: "*"

./tokenizer "hell34432omy name3120x12838 02333 03233a 0233 0x234422a [][] // /* hello this is a test 123 ,a., 0x23a /* */ 0x12233jk ()() ** 8 ()()() /**/ te233ing23oxx 0230x2344 2e-34 24434e-13 0.2330004 0003412.130 <<>> <<><<><><>>>>>>>>>>> &&& ^^^^\] ! 3434 ~ /=-/ *&^/ ^=340x23 0x230000effmo~[][] 3e3 this is the ending portion if else auto break case char float for extern while unionswitchforgoto now we end the test case"
word: "hell34432omy"
word: "name3120x12838"
octal integer: "02333"
octal integer: "03233"
word: "a"
octal integer: "0233"
hexadecimal integer: "0x234422a"
left bracket: "["
right bracket: "]"
left bracket: "["
right bracket: "]"
word: "hello"
word: "this"
word: "is"
word: "a"
word: "test"
decimal integer: "123"
comma: ","
word: "a"
structure member: "."
comma: ","
hexadecimal integer: "0x23a"      
hexadecimal integer: "0x12233"    
word: "jk"
left parenthesis: "("
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
multiply/dereference operator: "*"
multiply/dereference operator: "*"
decimal integer: "8"
left parenthesis: "("
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
word: "te233ing23oxx"
octal integer: "0230"
word: "x2344"
float: "2e-34"
float: "24434e-13"
float: "0.2330004"
float: "0003412.1130"
shift left: "<<"
shift right: ">>"
shift left: "<<"
greater than test: ">"
shift left: "<<"
greater than test: ">"
less than test: "<"
greater than test: ">"
less than test: "<"
shift right: ">>"
shift right: ">>"
shift right: ">>"
shift right: ">>"
shift right: ">>"
greater than test: ">"
logical AND: "&&"
AND/address operator: "&"
bitwise XOR: "^"
bitwise XOR: "^"
bitwise XOR: "^"
bitwise XOR: "^"
right bracket: "]"
negate: "!"
decimal integer: "3434"
1s complement: "~"
divide equals: "/="
minus/subtract operator: "-"
division: "/"
multiply/dereference operator: "*"
AND/address operator: "&"
bitwise XOR: "^"
division: "/"
bitwise XOR equals: "^="
decimal integer: "340"
word: "x23"
hexadecimal integer: "0x230000eff"
word: "mo"
1s complement: "~"
left bracket: "["
right bracket: "]"
left bracket: "["
right bracket: "]"
decimal integer: "3"
word: "e3"
word: "this"
word: "is"
word: "the"
word: "ending"
word: "portion"
if: "if"
else: "else"
auto: "auto"
break: "break"
case: "case"
char: "char"
float: "float"
for: "for"
extern: "extern"
while: "while"
word: "unionswitchforgoto"
word: "now"
word: "we"
word: "end"
word: "the"
word: "test"
case: "case"

This test case is specifically for the extra credit
./tokenizer "hell34432omy name3120x12838 02333 03233a 0233 0x234422a [][] // /* 'hello this is a test 123 ,a., 0x23a /* */ 0x12233jk ()() ** 8' ()()() /**/ te233ing23oxx 0230x2344 2e-34 24434e-13 0.2330004 0003412.130 <<>> <<><<><><>>>>>>>>>>> &&& ^^^^\] ! 3434 ~ /=-/ *&^/ ^=340x23 0x230000effmo~[][] 3e3 'this is the ending portion' if else auto break case char float for extern while unionswitchforgoto 'now we end the test case'"
word: "hell34432omy"
word: "name3120x12838"
octal integer: "02333"
octal integer: "03233"
word: "a"
octal integer: "0233"
hexadecimal integer: "0x234422a"
left bracket: "["
right bracket: "]"
left bracket: "["
right bracket: "]"
Quote Block: "'hello this is a test 123 ,"
word: "a"
structure member: "."
comma: ","
hexadecimal integer: "0x23a"
hexadecimal integer: "0x12233"
word: "jk"
left parenthesis: "("
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
multiply/dereference operator: "*"
multiply/dereference operator: "*"
decimal integer: "8"
Quote Block: "' ("
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
left parenthesis: "("
right parenthesis: ")"
word: "te233ing23oxx"
octal integer: "0230"
word: "x2344"
float: "2e-34"
float: "24434e-13"
float: "0.2330004"
float: "0003412.1130"
shift left: "<<"
shift right: ">>"
shift left: "<<"
greater than test: ">"
shift left: "<<"
greater than test: ">"
less than test: "<"
greater than test: ">"
less than test: "<"
shift right: ">>"
shift right: ">>"
shift right: ">>"
shift right: ">>"
shift right: ">>"
greater than test: ">"
logical AND: "&&"
AND/address operator: "&"
bitwise XOR: "^"
bitwise XOR: "^"
bitwise XOR: "^"
bitwise XOR: "^"
right bracket: "]"
negate: "!"
decimal integer: "3434"
1s complement: "~"
divide equals: "/="
minus/subtract operator: "-"
division: "/"
multiply/dereference operator: "*"
AND/address operator: "&"
bitwise XOR: "^"
division: "/"
bitwise XOR equals: "^="
decimal integer: "340"
word: "x23"
hexadecimal integer: "0x230000eff"
word: "mo"
1s complement: "~"
left bracket: "["
right bracket: "]"
left bracket: "["
right bracket: "]"
decimal integer: "3"
word: "e3"
Quote Block: "'this is the ending portion'"
if: "if"
else: "else"
auto: "auto"
break: "break"
case: "case"
char: "char"
float: "float"
for: "for"
extern: "extern"
while: "while"
word: "unionswitchforgoto"
Quote Block: "'now we end the test case'"
